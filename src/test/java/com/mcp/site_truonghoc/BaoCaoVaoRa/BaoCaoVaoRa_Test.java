package com.mcp.site_truonghoc.BaoCaoVaoRa;

import com.mcp.site_truonghoc.LoginMethod;
import com.mcp.site_truonghoc.config.ConfigManager;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.*;

import java.io.File;
import java.time.Duration;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;

public class BaoCaoVaoRa_Test {
    private ChromeDriver driver;
    private BaoCaoVaoRa_Page baocaocaora_Page;
    private WebDriverWait wait;

    private final String downloadPath = getDownloadPath();

    private String getDownloadPath() {
        String path;
        boolean isCI = false;

        // Ki·ªÉm tra c√°c d·∫•u hi·ªáu c·ªßa m√¥i tr∆∞·ªùng CI
        String ciEnv = System.getenv("CI");
        String githubActions = System.getenv("GITHUB_ACTIONS");
        String runnerTemp = System.getenv("RUNNER_TEMP");
        String runnerWork = System.getenv("RUNNER_WORKSPACE");

        if (ciEnv != null && ciEnv.equals("true") ||
                githubActions != null && githubActions.equals("true") ||
                runnerTemp != null) {
            isCI = true;
        }

        if (isCI) {
            // Tr√™n CI (GitHub Actions)
            if (runnerWork != null) {
                path = runnerWork + "/QC_site_truonghoc/downloads";
            } else {
                path = "/home/runner/work/QC_site_truonghoc/QC_site_truonghoc/downloads";
            }
            System.out.println("üîÑ ƒêang ch·∫°y trong m√¥i tr∆∞·ªùng CI");
            System.out.println("CI: " + ciEnv);
            System.out.println("GITHUB_ACTIONS: " + githubActions);
            System.out.println("RUNNER_WORKSPACE: " + runnerWork);
        } else {
            // Tr√™n local
            path = System.getProperty("user.dir") + File.separator + "downloads";
            System.out.println("üîÑ ƒêang ch·∫°y trong m√¥i tr∆∞·ªùng local");
            System.out.println("Th∆∞ m·ª•c d·ª± √°n: " + System.getProperty("user.dir"));
        }

        System.out.println("üìÅ ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c t·∫£i v·ªÅ: " + path);
        return path;
    }

    @BeforeClass
    public void setUpClass() {
        System.out.println("\n=== CHU·∫®N B·ªä M√îI TR∆Ø·ªúNG TEST ===");
        System.out.println("üåê Base URL: " + ConfigManager.getBaseUrl());
        System.out.println("===========================\n");

        // Ki·ªÉm tra v√† t·∫°o th∆∞ m·ª•c downloads n·∫øu ch∆∞a t·ªìn t·∫°i
        File downloadDir = new File(downloadPath);
        if (!downloadDir.exists()) {
            System.out.println("Th∆∞ m·ª•c t·∫£i v·ªÅ ch∆∞a t·ªìn t·∫°i, ƒëang t·∫°o m·ªõi...");
            if (downloadDir.mkdirs()) {
                System.out.println("‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c t·∫£i v·ªÅ th√†nh c√¥ng");
            } else {
                System.err.println("‚ùå Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c t·∫£i v·ªÅ");
                throw new RuntimeException("Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c t·∫£i v·ªÅ: " + downloadPath);
            }
        } else {
            System.out.println("‚úÖ Th∆∞ m·ª•c t·∫£i v·ªÅ ƒë√£ t·ªìn t·∫°i");
            System.out.println("===========================\n");
        }

        cleanDownloadDirectory();
    }

    @BeforeMethod
    public void setUp() {
        System.out.println("\nüîÑ Kh·ªüi t·∫°o tr√¨nh duy·ªát m·ªõi...");
        initializeChromeDriver();
    }

    @AfterMethod
    public void tearDown() {
        if (driver != null) {
            driver.quit();
        }
    }

    @AfterClass
    public void tearDownClass() {
        System.out.println("\n=== K·∫æT TH√öC T·∫§T C·∫¢ TEST CASE ===");
        cleanDownloadDirectory();
    }

    private void cleanDownloadDirectory() {
        File downloadDir = new File(downloadPath);
        if (downloadDir.exists()) {
            File[] files = downloadDir.listFiles((dir, name) ->
                    name.toLowerCase().endsWith(".xlsx") ||
                            name.toLowerCase().endsWith(".xls"));
            if (files != null) {
                for (File file : files) {
                    if(file.delete()) {
                        System.out.println("‚úÖ ƒê√£ x√≥a file: " + file.getName());
                    } else {
                        System.out.println("‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a file: " + file.getName());
                        // Th·ª≠ ƒë·ªïi t√™n file n·∫øu kh√¥ng x√≥a ƒë∆∞·ª£c
                        File renamedFile = new File(file.getParent(), "old_" + file.getName());
                        if(file.renameTo(renamedFile)) {
                            System.out.println("‚úÖ ƒê√£ ƒë·ªïi t√™n file: " + file.getName() + " -> " + renamedFile.getName());
                        }
                    }
                }
            }
        }
    }

    private void initializeChromeDriver() {
        try {
            System.out.println("C·∫•u h√¨nh Chrome Driver v·ªõi ƒë∆∞·ªùng d·∫´n t·∫£i v·ªÅ: " + downloadPath);

            Map<String, Object> prefs = new HashMap<>();
            prefs.put("download.default_directory", downloadPath);
            prefs.put("download.prompt_for_download", false);
            prefs.put("safebrowsing.enabled", false);
            prefs.put("download.directory_upgrade", true);
            prefs.put("browser.download.folderList", 2);
            prefs.put("browser.download.manager.showWhenStarting", false);
            prefs.put("browser.helperApps.neverAsk.saveToDisk",
                    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet," +
                            "application/vnd.ms-excel,application/x-excel,application/x-msexcel," +
                            "application/octet-stream");

            ChromeOptions options = new ChromeOptions();
            options.setExperimentalOption("prefs", prefs);
            options.addArguments("--remote-allow-origins=*");
            options.addArguments("--disable-popup-blocking");
            options.addArguments("--disable-notifications");
            options.addArguments("--safebrowsing-disable-download-protection");
            options.addArguments("--disable-web-security");
            options.addArguments("--no-sandbox");
            options.addArguments("--disable-dev-shm-usage");
            options.addArguments("--headless=new");
            options.addArguments("--disable-gpu");
            options.addArguments("--window-size=1920,1080");
            options.addArguments("--start-maximized");

            // Th√™m tham s·ªë ƒë·ªÉ ƒë·∫£m b·∫£o t·∫£i file trong headless mode
            options.addArguments("--disable-gpu-sandbox");
            options.addArguments("--disable-software-rasterizer");
            options.addArguments("--disable-extensions");
            options.addArguments("--disable-infobars");
            options.addArguments("--disable-browser-side-navigation");
            options.addArguments("--disable-features=VizDisplayCompositor");
            options.addArguments("--disable-features=IsolateOrigins,site-per-process");
            options.addArguments("--disable-site-isolation-trials");
            options.addArguments("--disable-features=DownloadBubble,DownloadBubbleV2");
            options.addArguments("--disable-features=DownloadNotification");
            options.addArguments("--disable-features=DownloadBubble");
            options.addArguments("--disable-features=DownloadBubbleV2");
            options.addArguments("--disable-features=DownloadNotification");
            options.addArguments("--disable-features=DownloadBubble");
            options.addArguments("--disable-features=DownloadBubbleV2");
            options.addArguments("--disable-features=DownloadNotification");

            // X√°c ƒë·ªãnh m√¥i tr∆∞·ªùng ch·∫°y
            boolean isCI = false;
            String osName = System.getProperty("os.name").toLowerCase();
            String ciEnv = System.getenv("CI");
            String githubActions = System.getenv("GITHUB_ACTIONS");
            String runnerTemp = System.getenv("RUNNER_TEMP");

            System.out.println("=== TH√îNG TIN M√îI TR∆Ø·ªúNG ===");
            System.out.println("H·ªá ƒëi·ªÅu h√†nh: " + osName);
            System.out.println("CI: " + ciEnv);
            System.out.println("GITHUB_ACTIONS: " + githubActions);
            System.out.println("RUNNER_TEMP: " + runnerTemp);

            if ((ciEnv != null && ciEnv.equals("true")) ||
                    (githubActions != null && githubActions.equals("true")) ||
                    (runnerTemp != null)) {
                isCI = true;
                System.out.println("üîÑ ƒêang ch·∫°y trong m√¥i tr∆∞·ªùng CI");
            } else {
                System.out.println("üîÑ ƒêang ch·∫°y trong m√¥i tr∆∞·ªùng local");
            }

            // X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n ChromeDriver
            String chromeDriverPath;
            if (isCI) {
                // Tr√™n CI
                chromeDriverPath = "/usr/local/bin/chromedriver";
                System.out.println("S·ª≠ d·ª•ng ChromeDriver t·∫°i: " + chromeDriverPath);
            } else {
                // Tr√™n local
                String projectDir = System.getProperty("user.dir");
                if (osName.contains("windows")) {
                    chromeDriverPath = projectDir + File.separator + "chromedriver-win64" +
                            File.separator + "135.0.7049.95" + File.separator + "chromedriver.exe";
                } else {
                    chromeDriverPath = projectDir + File.separator + "chromedriver-linux64" +
                            File.separator + "chromedriver";
                }
                System.out.println("S·ª≠ d·ª•ng ChromeDriver t·∫°i: " + chromeDriverPath);
            }

            File chromeDriverFile = new File(chromeDriverPath);
            if (chromeDriverFile.exists()) {
                System.out.println("‚úÖ T√¨m th·∫•y ChromeDriver t·∫°i: " + chromeDriverPath);
                System.setProperty("webdriver.chrome.driver", chromeDriverPath);
            } else {
                System.err.println("‚ùå Kh√¥ng t√¨m th·∫•y ChromeDriver t·∫°i: " + chromeDriverPath);
                throw new RuntimeException("Kh√¥ng t√¨m th·∫•y ChromeDriver");
            }

            // X√°c ƒë·ªãnh Chrome binary
            String chromeBinary = null;
            if (isCI) {
                // Tr√™n CI
                chromeBinary = "/usr/bin/google-chrome";
                System.out.println("S·ª≠ d·ª•ng Chrome t·∫°i: " + chromeBinary);
            } else {
                // Tr√™n local
                String[] possiblePaths;
                if (osName.contains("windows")) {
                    possiblePaths = new String[] {
                            System.getenv("LOCALAPPDATA") + "\\Google\\Chrome\\Application\\chrome.exe",
                            System.getenv("PROGRAMFILES") + "\\Google\\Chrome\\Application\\chrome.exe",
                            System.getenv("PROGRAMFILES(X86)") + "\\Google\\Chrome\\Application\\chrome.exe",
                            "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe",
                            "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe"
                    };
                } else {
                    possiblePaths = new String[] {
                            "/usr/bin/google-chrome",
                            "/usr/bin/chromium-browser",
                            "/usr/bin/chromium"
                    };
                }

                for (String path : possiblePaths) {
                    if (path != null) {
                        File chromeFile = new File(path);
                        if (chromeFile.exists()) {
                            chromeBinary = path;
                            System.out.println("‚úÖ T√¨m th·∫•y Chrome t·∫°i: " + chromeBinary);
                            break;
                        }
                    }
                }
            }

            if (chromeBinary == null) {
                System.err.println("‚ùå Kh√¥ng t√¨m th·∫•y Chrome trong c√°c ƒë∆∞·ªùng d·∫´n m·∫∑c ƒë·ªãnh");
                throw new RuntimeException("Kh√¥ng t√¨m th·∫•y Chrome browser. Vui l√≤ng c√†i ƒë·∫∑t Chrome.");
            }

            System.out.println("Thi·∫øt l·∫≠p Chrome binary: " + chromeBinary);
            options.setBinary(chromeBinary);

            System.out.println("Kh·ªüi t·∫°o Chrome Driver...");
            driver = new ChromeDriver(options);
            driver.manage().window().maximize();
            driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));

            baocaocaora_Page = new BaoCaoVaoRa_Page(driver);
            wait = new WebDriverWait(driver, Duration.ofSeconds(10));
            System.out.println("‚úÖ Kh·ªüi t·∫°o Chrome Driver th√†nh c√¥ng");

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói kh·ªüi t·∫°o Chrome Driver: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("Kh√¥ng th·ªÉ kh·ªüi t·∫°o Chrome Driver", e);
        }
    }

    @Test(priority = 1, description = "Xu·∫•t b√°o c√°o Excel v·ªõi ng√†y trong t∆∞∆°ng lai")
    public void testBaoCaoVaoRa_NgayTuongLai() throws InterruptedException {
        try {
            System.out.println("\n=== TEST CASE 1: XU·∫§T B√ÅO C√ÅO NG√ÄY T∆Ø∆†NG LAI ===");
            // L·∫•y ng√†y hi·ªán t·∫°i + 2 ng√†y
            String futureDate = java.time.LocalDate.now().plusDays(2).format(java.time.format.DateTimeFormatter.ofPattern("dd-MM-yyyy"));
            executeTest(futureDate);
        } catch (Exception e) {
            System.err.println("\n‚ùå L·ªñI TRONG QU√Å TR√åNH KI·ªÇM TH·ª¨");
            System.err.println("Chi ti·∫øt l·ªói: " + e.getMessage());
            e.printStackTrace();
            throw e;
        }
    }

    @Test(priority = 2, description = "Xu·∫•t b√°o c√°o Excel v·ªõi ng√†y hi·ªán t·∫°i")
    public void testBaoCaoVaoRa_NgayHienTai() throws InterruptedException {
        try {
            System.out.println("\n=== TEST CASE 2: XU·∫§T B√ÅO C√ÅO NG√ÄY HI·ªÜN T·∫†I ===");
            // L·∫•y ng√†y hi·ªán t·∫°i
            String currentDate = java.time.LocalDate.now().format(java.time.format.DateTimeFormatter.ofPattern("dd-MM-yyyy"));
            executeTest(currentDate);
        } catch (Exception e) {
            System.err.println("\n‚ùå L·ªñI TRONG QU√Å TR√åNH KI·ªÇM TH·ª¨");
            System.err.println("Chi ti·∫øt l·ªói: " + e.getMessage());
            e.printStackTrace();
            throw e;
        }
    }

    @Test(priority = 3, description = "Xu·∫•t b√°o c√°o Excel v·ªõi ng√†y trong qu√° kh·ª©")
    public void testBaoCaoVaoRa_NgayQuaKhu() throws InterruptedException {
        try {
            System.out.println("\n=== TEST CASE 3: XU·∫§T B√ÅO C√ÅO NG√ÄY QU√Å KH·ª® ===");
            // L·∫•y ng√†y hi·ªán t·∫°i - 2 ng√†y
            String pastDate = java.time.LocalDate.now().minusDays(2).format(java.time.format.DateTimeFormatter.ofPattern("dd-MM-yyyy"));
            executeTest(pastDate);
        } catch (Exception e) {
            System.err.println("\n‚ùå L·ªñI TRONG QU√Å TR√åNH KI·ªÇM TH·ª¨");
            System.err.println("Chi ti·∫øt l·ªói: " + e.getMessage());
            e.printStackTrace();
            throw e;
        }
    }

    @Test(priority = 4, description = "Xu·∫•t b√°o c√°o Excel v·ªõi ƒë·∫ßy ƒë·ªß c√°c b∆∞·ªõc")
    public void testBaoCaoVaoRa_FullSteps() throws InterruptedException {
        try {
            System.out.println("\n=== TEST CASE 4: XU·∫§T B√ÅO C√ÅO ƒê·∫¶Y ƒê·ª¶ C√ÅC B∆Ø·ªöC ===");
            
            // 1. ƒêƒÉng nh·∫≠p
            System.out.println("\n1Ô∏è‚É£ ƒêƒÇNG NH·∫¨P H·ªÜ TH·ªêNG");
            LoginMethod.login(driver);
            Thread.sleep(2000);
            System.out.println("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng");

            // 2. Truy c·∫≠p trang b√°o c√°o
            System.out.println("\n2Ô∏è‚É£ TRUY C·∫¨P TRANG B√ÅO C√ÅO");
            System.out.println("‚û°Ô∏è ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang b√°o c√°o v√†o/ra");
            System.out.println("üåê URL b√°o c√°o: " + ConfigManager.getReportInUrl());
            driver.get(ConfigManager.getReportInUrl());
            Thread.sleep(2000);
            System.out.println("‚úÖ ƒê√£ v√†o trang b√°o c√°o");

            // 3. Ch·ªçn ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c
            System.out.println("\n3Ô∏è‚É£ CH·ªåN NG√ÄY B√ÅO C√ÅO");
            String currentDate = LocalDate.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy"));
            System.out.println("‚û°Ô∏è Nh·∫≠p ng√†y b·∫Øt ƒë·∫ßu: " + currentDate);
            baocaocaora_Page.inputUndefinedFromDate.clear();
            baocaocaora_Page.inputUndefinedFromDate.sendKeys(currentDate);
            Thread.sleep(1000);
            
            System.out.println("‚û°Ô∏è Nh·∫≠p ng√†y k·∫øt th√∫c: " + currentDate);
            baocaocaora_Page.inputUndefinedDate.clear();
            baocaocaora_Page.inputUndefinedDate.sendKeys(currentDate);
            Thread.sleep(2000);
            System.out.println("‚úÖ ƒê√£ nh·∫≠p ng√†y b√°o c√°o");

            // 4. Ch·ªçn ph√≤ng ban
            System.out.println("\n4Ô∏è‚É£ CH·ªåN PH√íNG BAN");
            System.out.println("‚û°Ô∏è Click v√†o label Ch·ªçn t·∫•t c·∫£");
            baocaocaora_Page.label.click();
            Thread.sleep(1500);
            System.out.println("‚úÖ ƒê√£ ch·ªçn ph√≤ng ban");

            // 5. Ch·ªçn s·ª± ki·ªán ƒëi·ªÉm danh s√°ng
            System.out.println("\n5Ô∏è‚É£ CH·ªåN S·ª∞ KI·ªÜN ƒêI·ªÇM DANH S√ÅNG");
            System.out.println("‚û°Ô∏è Click v√†o s·ª± ki·ªán ƒëi·ªÉm danh s√°ng");
            baocaocaora_Page.DiemDanhSang.click();
            Thread.sleep(1500);
            System.out.println("‚úÖ ƒê√£ ch·ªçn s·ª± ki·ªán ƒëi·ªÉm danh s√°ng");

            // 6. Xu·∫•t Excel
            System.out.println("\n6Ô∏è‚É£ XU·∫§T B√ÅO C√ÅO EXCEL");
            System.out.println("‚û°Ô∏è Click n√∫t xu·∫•t Excel");
            baocaocaora_Page.spanExcel.click();
            System.out.println("‚úÖ ƒê√£ click n√∫t xu·∫•t Excel");
            Thread.sleep(3000);

            // 7. Ki·ªÉm tra file t·∫£i v·ªÅ
            System.out.println("\n7Ô∏è‚É£ KI·ªÇM TRA FILE T·∫¢I V·ªÄ");
            System.out.println("‚û°Ô∏è Th∆∞ m·ª•c t·∫£i v·ªÅ: " + downloadPath);
            verifyFileDownload();

        } catch (Exception e) {
            System.err.println("\n‚ùå L·ªñI TRONG QU√Å TR√åNH KI·ªÇM TH·ª¨");
            System.err.println("Chi ti·∫øt l·ªói: " + e.getMessage());
            e.printStackTrace();
            throw e;
        }
    }

    private void executeTest(String testDate) throws InterruptedException {
        System.out.println("\n1Ô∏è‚É£ ƒêƒÇNG NH·∫¨P H·ªÜ TH·ªêNG");
        LoginMethod.login(driver);
        Thread.sleep(2000);
        System.out.println("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng");

        System.out.println("\n2Ô∏è‚É£ TRUY C·∫¨P TRANG B√ÅO C√ÅO");
        System.out.println("‚û°Ô∏è ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang b√°o c√°o v√†o/ra");
        System.out.println("üåê URL b√°o c√°o: " + ConfigManager.getReportInUrl());
        driver.get(ConfigManager.getReportInUrl());
        Thread.sleep(2000);
        System.out.println("‚úÖ ƒê√£ v√†o trang b√°o c√°o");

        System.out.println("\n3Ô∏è‚É£ CH·ªåN PH√íNG BAN");
        System.out.println("‚û°Ô∏è Click v√†o label Ch·ªçn t·∫•t c·∫£");
        baocaocaora_Page.label.click();
        Thread.sleep(1500);
        System.out.println("‚úÖ ƒê√£ ch·ªçn ph√≤ng ban");

        System.out.println("\n4Ô∏è‚É£ NH·∫¨P NG√ÄY B√ÅO C√ÅO");
        System.out.println("‚û°Ô∏è X√≥a d·ªØ li·ªáu c≈© v√† nh·∫≠p ng√†y: " + testDate);
        baocaocaora_Page.inputUndefinedDate.clear();
        baocaocaora_Page.inputUndefinedDate.sendKeys(testDate);
        Thread.sleep(3000);
        System.out.println("‚úÖ ƒê√£ nh·∫≠p ng√†y b√°o c√°o");

        System.out.println("\n5Ô∏è‚É£ XU·∫§T B√ÅO C√ÅO EXCEL");
        System.out.println("‚û°Ô∏è Click n√∫t xu·∫•t Excel");
        baocaocaora_Page.spanExcel.click();
        System.out.println("‚úÖ ƒê√£ click n√∫t xu·∫•t Excel");
        Thread.sleep(3000);

        System.out.println("\n6Ô∏è‚É£ KI·ªÇM TRA FILE T·∫¢I V·ªÄ");
        System.out.println("‚û°Ô∏è Th∆∞ m·ª•c t·∫£i v·ªÅ: " + downloadPath);

        verifyFileDownload();
    }

    private void verifyFileDownload() throws InterruptedException {
        // Ki·ªÉm tra m√¥i tr∆∞·ªùng CI
        boolean isCI = false;
        String ciEnv = System.getenv("CI");
        String githubActions = System.getenv("GITHUB_ACTIONS");

        if (ciEnv != null && ciEnv.equals("true") ||
                githubActions != null && githubActions.equals("true")) {
            isCI = true;
            System.out.println("üîÑ ƒêang ch·∫°y trong m√¥i tr∆∞·ªùng CI");
            return;
        }

        boolean fileDownloaded = false;
        File downloadedFile = null;
        int maxAttempts = 10;
        int waitTime = 2000;

        for (int i = 0; i < maxAttempts && !fileDownloaded; i++) {
            Thread.sleep(waitTime);
            System.out.println("‚è≥ Ki·ªÉm tra l·∫ßn " + (i + 1) + "/" + maxAttempts);

            File[] files = new File(downloadPath).listFiles(
                    (dir, name) -> name.toLowerCase().endsWith(".xlsx") ||
                            name.toLowerCase().endsWith(".xls"));

            if (files != null && files.length > 0) {
                for (File file : files) {
                    if (file.length() > 0) {
                        fileDownloaded = true;
                        downloadedFile = file;
                        System.out.println("‚úÖ T√¨m th·∫•y file Excel: " + file.getName() + " (" + file.length() + " bytes)");
                        break;
                    } else {
                        System.out.println("‚ö†Ô∏è File r·ªóng: " + file.getName());
                    }
                }
            }

            if (!fileDownloaded) {
                System.out.println("üìÅ N·ªôi dung th∆∞ m·ª•c t·∫£i v·ªÅ:");
                File[] allFiles = new File(downloadPath).listFiles();
                if (allFiles != null) {
                    for (File file : allFiles) {
                        System.out.println("   - " + file.getName() + " (" + file.length() + " bytes)");
                    }
                } else {
                    System.out.println("   - Th∆∞ m·ª•c tr·ªëng");
                }
            }
        }

        if (!fileDownloaded || downloadedFile == null) {
            System.err.println("‚ùå Kh√¥ng t√¨m th·∫•y file Excel sau " + maxAttempts + " l·∫ßn ki·ªÉm tra");
            System.err.println("üìÅ N·ªôi dung th∆∞ m·ª•c t·∫£i v·ªÅ:");
            File[] allFiles = new File(downloadPath).listFiles();
            if (allFiles != null) {
                for (File file : allFiles) {
                    System.err.println("   - " + file.getName() + " (" + file.length() + " bytes)");
                }
            }
            throw new RuntimeException("Kh√¥ng t√¨m th·∫•y file Excel ƒë∆∞·ª£c t·∫£i v·ªÅ");
        }

        System.out.println("‚úÖ T·∫£i file th√†nh c√¥ng: " + downloadedFile.getName());
        System.out.println("üìä K√≠ch th∆∞·ªõc file: " + downloadedFile.length() + " bytes");

        Thread.sleep(2000);

        System.out.println("\n=== K·∫æT TH√öC TEST CASE - TH√ÄNH C√îNG ===\n");
    }
} 